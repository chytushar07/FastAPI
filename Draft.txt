#Creating a function to get post
my_post=[{"title 1":"title of post 1","content":"content of post 1","id":1},{"title 2":"title of post 2","content":"content of post 2","id":2},{"title 3":"title of post 3","content":"content of post 3","id":3}]
    def find_post(id):
        for p in my_post:
            if p['id']==id:
                return p
            # else:
            #     return "Post not found"

POST create
 # post.dict() dict is decapricated model_dump is new dic
    post_dict=post.model_dump()
    post_dict['id']=randrange(0,10000000)
    my_post.append(post_dict)  
    return {'data': post_dict}

GET by ID
  post=find_post(id)
    if not post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail=f"Post with id:{id} was not found")
    print(post)
    return {"post detail":f"Yello {post}"}

******************************************************************************************************************************************************
Using Postgres default driver:
   from fastapi import FastAPI, HTTPException , Response ,status
from fastapi import Body
from pydantic import BaseModel 
from typing import Optional
from random import randrange 
import psycopg2
from psycopg2.extras import RealDictCursor
import time

app = FastAPI() #Create instance of fastAPI

# Defining data schema:
class Post(BaseModel): #This will ensure front-end send data type we want.
    title:str
    content:str
    published: bool =True
    # rating:Optional[int]=None
    # id:int

while True:
    try:
        conn = psycopg2.connect(host="localhost",database="fastapi",user='postgres',password="dbpass123",cursor_factory=RealDictCursor)
        # The use of RealDictCursor is beneficial when mapping column values to keys in dictionaries. However, it's important to note that accessing columns is not limited to RealDictCursor. 
        # Even without using it, default cursor types, such as the regular cursor, allow access to columns, albeit in the form of tuples where each element corresponds to a column in the result set.
        cursor=conn.cursor()    #Execute database commands
        print("Database connection was successfull!")
        break
    except Exception as error:
        print("Connecting to database failed")
        print("Error :",error)
        time.sleep(2)
        # We have established connection and now we can perform SQL Codes.


my_post=[{"title 1":"title of post 1","content":"content of post 1","id":1},{"title 2":"title of post 2","content":"content of post 2","id":2},{"title 3":"title of post 3","content":"content of post 3","id":3}]
def find_post(id):
    for p in my_post:
        if p['id']==id:
            return p
        # else:
        #     return "Post not found"

# Method used: GET and / defines url -All Methods[https://www.geeksforgeeks.org/different-kinds-of-http-requests/] where @ represents decorator 
@app.get("/")
async def root(): #Defining function//root is a function name
    cursor.execute("""SELECT * FROM posts""") #Exceute commands
    posts=cursor.fetchall()
    print(posts)
    return posts

@app.get("/posts")
def get_posts():
    return {"Data":"You got it"}

@app.post("/posts")
def create_posts(post:Post):
   cursor.execute("""INSERT INTO posts (title,content,published) VALUES (%s,%s,%s) RETURNING * """,
                  (post.title,post.content,post.published))
   new_post=cursor.fetchone()
   conn.commit()
   return {"DAta :" :new_post}

@app.get("/posts/{id}") #Id represents path parameter
def get_post(id: int):
    cursor.execute("""SELECT * from posts WHERE id = %s""",(str(id),))
    post = cursor.fetchone()
    if not post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, 
                            detail=f"Post with id:{id} not found")
    
    return {"Your post is":post}
  

@app.delete("/posts/{id}",status_code=status.HTTP_204_NO_CONTENT)
def delete_post(id:int):
    cursor.execute("""DELETE FROM posts WHERE id=%s returning *""",(str(id),))
    deleted_post=cursor.fetchone()
    conn.commit()
    if not deleted_post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail=f"post with id {id} not found")
    return Response(status_code=status.HTTP_204_NO_CONTENT)

@app.put("/posts/{id}")
def update_post(id:int,post:Post):
    cursor.execute("""UPDATE posts SET title= %s,content= %s,published=%s WHERE id =%s RETURNING *""",(post.title,post.content,post.published,str(id)))
    updated_post=cursor.fetchone()
    conn.commit()
     
    if updated_post==None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"post with {id} does not exist")
    return {"data":updated_post}
   